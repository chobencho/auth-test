memo-auth_test

・下記を参考にdevise_token_authを用いたログインサンプルを作成
https://zenn.dev/shogo_matsumoto/articles/c6485b39c5f621#1.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90-1

・メール認証後のサインインでエラーが出たため下記を参考に修正
https://github.com/lynndylanhurley/devise_token_auth/issues/1540

・Homeでサインアウトボタンを付けました。

・api部分だけgitへプッシュできない問題について参考サイト
https://teratail.com/questions/272990

・Sourcetreeの使い方
https://sunny10side.com/how-to-connect-and-use-github-and-sourcetree-mac-version/


■Railsの命名規則
モデルクラス：ModelSchedule
ファイル名：model_schedule.rb
テーブル名：model_schedules
▽下記のようにモデルを作成する
[rails g model ModelSchedule user_id:integer schedule:text]


実装メモ
■個別メッセージ
・「メッセージする」を押す
・[room_members]にroom_id,user_idを下記のように登録
room_id-A   user_id-1
room_id-A   user_id-2
・[rooms]にroom_idを下記のように登録
room_id-A
・個別メッセージに飛ばす、URLは[rooms]のroom_idから取得
・[room_members]のuser_idからuserのデータを表示する

■メッセージを送る
・送信ボタンを押下
・[messages]にroom_id,user_id,bodyを登録(非同期)

■メッセージ一覧
・自分のuser_idを[room_members]で検索
・出てきたroom_idリストをmapで回す
・room_idを[room_members]で検索かけて自分のuser_idではない方を取得して表示する
・そのルームの最後のメッセージを表示する

■趣味
・それぞれの趣味画像に番号を振る
・画像をクリックするとチェックマークがつく
・5つまでチェック可能
・チェックした画像の番号をパラメーターとしてバックエンドに投げてDBに登録する
・5個以上はチェックできないようにする

■興味ある分野
・3つの入力フォームにそれぞれ番号を振る
・他と同じ要領で登録コード書く
・あとでバリデーションするときに、入力内容が被ってたらエラーにするように設定する

■プロフ画像の送信
・画像をinputに入れる
・画像名をuuidでユニークIDに変更する
・react側のpublicに画像を登録する
・rails側でDBに画像名を登録する


